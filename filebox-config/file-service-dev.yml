server:
  port: 8181

spring:
  application:
    name: file-service
  cloud:
    config:
      profile: dev
      label: master
      discovery:
        enabled: true
        service-id: config-service
  servlet:
    multipart:
      max-file-size: 1000MB
      max-request-size: 1100MB
  redis:
    database: 0
    pool:
      max-active: 8
      max-idle: 9
      max-wait: -1
      min-idle: 0
  redis-master:
    host: master.redis.xufilebox.top
    port: 6379
    password: 7XQnwjQvvaXWbjYYhaKy
    testOnBorrow: true
  redis-slave1:
    host: slave1.redis.xufilebox.top
    port: 6379
    password: 7XQnwjQvvaXWbjYYhaKy
    testOnBorrow: true
  redis-slave2:
    host: slave2.redis.xufilebox.top
    port: 6379
    password: 7XQnwjQvvaXWbjYYhaKy
    testOnBorrow: true
  datasource:
    dynamic:
      primary: master
      strict: false
      druid:
        initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
        min-idle: 10 # 最小连接池数量
        maxActive: 200 # 最大连接池数量
        maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置
        timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
        minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间
        validationQuery: SELECT 1 # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL
        testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun
        testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        poolPreparedStatements: true # 开启PSCache
        maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值
        connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次
        breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制
        timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔
        asyncInit: true # 异步初始化策略
        remove-abandoned: true # 是否自动回收超时连接
        remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)
        transaction-query-timeout: 6000 # 事务超时时间
      datasource:
        master:
          url: jdbc:mysql://master.db.xufilebox.top:3306/filebox?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
          username: root
          password: 3295286
          driver-class-name: com.mysql.cj.jdbc.Driver
        slave_1:
          url: jdbc:mysql://slave1.db.xufilebox.top:3306/filebox?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
          username: root
          password: 3295286
          driver-class-name: com.mysql.cj.jdbc.Driver
        slave_2:
          url: jdbc:mysql://slave2.db.xufilebox.top:3306/filebox?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
          username: root
          password: 3295286
          driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource

# ===================================================================
# 分布式文件系统FDFS配置
# ===================================================================
fdfs:
  so-timeout: 1501
  connect-timeout: 601
  thumb-image:             #缩略图生成参数
    width: 150
    height: 150
  tracker-list:            #TrackerList参数,支持多个
    - 47.111.136.145:22122
  pool:
    #从池中借出的对象的最大数目（配置为-1表示不限制）
    max-total: -1
    #获取连接时的最大等待毫秒数(默认配置为5秒)
    max-wait-millis: 5000
    #每个key最大连接数
    max-total-per-key: 50
    #每个key对应的连接池最大空闲连接数
    max-idle-per-key: 10
    #每个key对应的连接池最小空闲连接数
    max_idle_per_key: 5

  #mapper plus
mybatis-plus:
  mapper-locations: classpath*:top/xufilebox/common/mybatis/mapper/*Mapper.xml

eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ipAddress}:${spring.application.instance_id:${server.port}}
    hostname: 116.62.18.110
    ip-address: 116.62.18.110
  client:
    service-url:
      defaultZone: http://eureka.xufilebox.top:8002/eureka/,http://eureka.xufilebox.top:8001/eureka/

logging:
  config: classpath:log4j2-spring.xml
  file:
    path: logs

filebox:
  question:
    questionsMap: '{ "如何找回密码？": "本系统为了保护用户的隐私，对密码进行了加密处理，因此无法找回密码，可以联系管理员重置。", "如何联系管理员？": "请在输入框中输入【人工+问题+联系方式】，例如：【人工：请问怎么能变成大佬。手机号码：138xxxxxxxx。】管理员看到消息后会尽快回复，一定要在开头加【人工】字样", "如何像鲜哥一样牛？": "多吹牛逼。" }'
    questionMail: tianxu1998@outlook.com
    questionTitle: filebox问题反馈

feign:
  #替换掉JDK默认HttpURLConnection实现的 Http Client
  httpclient:
    enabled: true
  hystrix:
    enabled: true
  client:
    config:
      default:
        #连接超时时间
        connectTimeout: 50000
        #读取超时时间
        readTimeout: 50000
#
#hystrix:
#  propagate:
#    request-attribute:
#      enabled: true
#  command:
#    #全局默认配置
#    default:
#      #线程隔离相关
#      execution:
#        timeout:
#          #是否给方法执行设置超时时间，默认为true。一般我们不要改。
#          enabled: true
#        isolation:
#          #配置请求隔离的方式，这里是默认的线程池方式。还有一种信号量的方式semaphore，使用比较少。
#          strategy: threadPool
#          thread:
#            #方式执行的超时时间，默认为1000毫秒，在实际场景中需要根据情况设置
#            timeoutInMilliseconds: 10000
#            #发生超时时是否中断方法的执行，默认值为true。不要改。
#            interruptOnTimeout: true
#            #是否在方法执行被取消时中断方法，默认值为false。没有实际意义，默认就好！
#            interruptOnCancel: false
#  circuitBreaker:   #熔断器相关配置
#    enabled: true   #是否启动熔断器，默认为true，false表示不要引入Hystrix。
#    requestVolumeThreshold: 20     #启用熔断器功能窗口时间内的最小请求数，假设我们设置的窗口时间为10秒，
#    sleepWindowInMilliseconds: 5000    #所以此配置的作用是指定熔断器打开后多长时间内允许一次请求尝试执行，官方默认配置为5秒。
#    errorThresholdPercentage: 50   #窗口时间内超过50%的请求失败后就会打开熔断器将后续请求快速失败掉,默认配置为50
#
#ribbon:
#  eager-load:
#    enabled: true
#  #说明：同一台实例的最大自动重试次数，默认为1次，不包括首次
#  MaxAutoRetries: 1
#  #说明：要重试的下一个实例的最大数量，默认为1，不包括第一次被调用的实例
#  MaxAutoRetriesNextServer: 1
#  #说明：是否所有的操作都重试，默认为true
#  OkToRetryOnAllOperations: true
#  #说明：从注册中心刷新服务器列表信息的时间间隔，默认为2000毫秒，即2秒
#  ServerListRefreshInterval: 2000
#  #说明：使用Apache HttpClient连接超时时间，单位为毫秒
#  ConnectTimeout: 5000
#  #说明：使用Apache HttpClient读取的超时时间，单位为毫秒
#  ReadTimeout: 5000